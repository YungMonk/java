<?xml version="1.0" encoding="UTF-8"?>
<!--project是pom.xml的根元素，包含了一些约束的信息，比如 xlmns,xsi-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--指定了当前pom的版本-->
    <modelVersion>4.0.0</modelVersion>

    <!-- 基础设置 -->
    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.winner.trade，maven会将该项目打成的jar包放本地路径：/com/winner/trade -->
    <groupId>rpc.positions</groupId>
    <!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->
    <artifactId>position</artifactId>
    <!-- 本项目目前所处的版本号 -->
    <version>1.0.0</version>
    <!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar -->
    <packaging>jar</packaging>
    <!-- 项目描述名，一般是写项目文档的时候才使用 -->
    <name>基础职位数据对外接口</name>
    <!-- 项目的地址-->
    <url>position.rpc</url>
    <!-- 项目的描述 -->
    <description>java project for Spring Boot</description>

    <!-- 为pom定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 ：${file.encoding} -->
    <properties>
        <java.version>1.8</java.version>
        <mysql.version>8.0.18</mysql.version>
        <hibernate.version>6.0.0.Alpha4</hibernate.version>
        <spring.version>5.2.2.RELEASE</spring.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/>
    </parent>

    <!-- 依赖列表，下面可以包含多个依赖项dependency-->
    <dependencies>
        <!-- 添加Log4J依赖 -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>

        <!-- Spring 4 dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
        </dependency>

        <!--mysql -->
        <dependency>
            <!-- 指定坐标确定依赖项的位置 -->
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.18</version>
            <!-- 依赖包的依赖范围 compile,provided,runtime,test,system-->
            <scope>runtime</scope>
            <!-- 这个标签只有true和false两个值，是用来设置依赖是否可选 -->
            <optional>false</optional>
            <!-- 排除依赖传递列表 -->
            <!--<exclusions>-->
            <!--    <exclusion>-->
            <!--        <groupId></groupId>-->
            <!--        <artifactId></artifactId>-->
            <!--    </exclusion>-->
            <!--</exclusions>-->
        </dependency>

        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-c3p0</artifactId>
            <version>6.0.0.Alpha4</version>
        </dependency>

    </dependencies>

    <!-- 常用于给构件的行为提供相应的支持 -->
    <build>
        <!-- 构建产生的文件名，默认值是${artifactId}-${version} -->
        <finalName>${project.artifactId}-${project.version}</finalName>
        <!-- 构建产生的所有文件存放的目录,默认为${basedir}/target，即项目根目录下的target -->
        <directory>${basedir}/target</directory>
        <!-- 项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径 -->
        <sourceDirectory>${basedir}/src/main</sourceDirectory >
        <!-- 项目脚本源码目录，该目录和源码目录不同， 绝大多数情况下，该目录下的内容会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的) -->
        <scriptSourceDirectory>${basedir}/src/main/scripts</scriptSourceDirectory>
        <!-- 项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径 -->
        <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory >
        <!-- 被编译过的应用程序class文件存放的目录 -->
        <outputDirectory>${basedir}\target\classes</outputDirectory>
        <!-- 被编译过的测试class文件存放的目录 -->
        <testOutputDirectory>${basedir}\target\test-classes</testOutputDirectory>

        <!-- 项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被包含在最终的打包文件里 -->
        <resources>
            <resource>
                <!--描述存放资源的目录，该路径相对POM路径 -->
                <directory>src/main/resources</directory>
                <!--包含的模式列表 -->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <!--排除的模式列表 如果<include>与<exclude>划定的范围存在冲突，以<exclude>为准 -->
                <excludes>
                    <exclude>jdbc.properties</exclude>
                </excludes>
            </resource>
        </resources>

        <!--单元测试相关的所有资源路径，配制方法与resources类似 -->
        <testResources>
            <testResource>
                <directory> src/test/resources</directory>
            </testResource>
        </testResources>

        <!-- 插件列表 -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!-- 支持自定义的打包结构，也可以定制依赖项等 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.2.0</version>
                <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
                <executions>
                    <execution>
                        <!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 -->
                        <id>make-assembly</id>
                        <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 -->
                        <phase>package</phase>
                        <!--配置的执行目标 -->
                        <goals>
                            <!-- 只运行一次 -->
                            <goal>single</goal>
                        </goals>
                        <!--配置是否被传播到子POM -->
                        <inherited>false</inherited>
                    </execution>
                </executions>
                <!--作为DOM对象的配置,配置项因插件而异 -->
                <configuration>
                    <finalName>${project.artifactId}-${project.version}</finalName>
                    <!-- 包名后追加 assembly true 追加, false 不追加-->
                    <appendAssemblyId>true</appendAssemblyId>
                    <!-- 配置描述符文件 -->
                    <descriptors>
                        <descriptor>src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                    <!-- 也可以使用Maven预配置的描述符
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs> -->
                </configuration>

                <!--是否从该插件下载Maven扩展（例如打包和类型处理器）， -->
                <!--由于性能原因，只有在真需要下载时，该元素才被设置成true。 -->
                <extensions>false</extensions>

                <!--任何配置是否被传播到子项目 -->
                <inherited>true</inherited>

            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>controller.Index</mainClass> <!-- 此处为主入口-->
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>

        <!--项目的一系列构建扩展,它们是一系列build过程中要使用的产品，会包含在running bulid's classpath里面 -->
        <!--他们可以开启extensions，也可以通过提供条件来激活plugins -->
        <!--简单来讲，extensions是在build过程被激活的产品 -->
        <extensions>

            <!--例如，通常情况下，程序开发完成后部署到线上Linux服务器，可能需要经历打包、 -->
            <!--将包文件传到服务器、SSH连上服务器、敲命令启动程序等一系列繁琐的步骤 -->
            <!--实际上这些步骤都可以通过Maven的一个插件 wagon-maven-plugin 来自动完成 -->
            <!--下面的扩展插件wagon-ssh用于通过SSH的方式连接远程服务器， -->
            <!--类似的还有支持ftp方式的wagon-ftp插件 -->
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>3.3.4</version>
            </extension>

        </extensions>
    </build>

</project>